"use server";

import { revalidatePath } from "next/cache";
import OpenAI from "openai";
import { db } from "@/lib/db";
import { targetCompanies, icpProfiles } from "@/lib/db/schema";
import { eq, and } from "drizzle-orm";
import { getUser, getTeamForUser } from "@/lib/db/queries";

export async function generateCompaniesAction(formData: FormData) {
  const user = await getUser();
  if (!user) {
    return {
      success: false,
      message: "Non authentifi√©",
    };
  }

  const team = await getTeamForUser();
  if (!team) {
    return {
      success: false,
      message: "√âquipe introuvable",
    };
  }

  const icpId = parseInt(String(formData.get("icpId") || "0"));
  let count = parseInt(String(formData.get("count") || "15"));

  if (!icpId) {
    return {
      success: false,
      message: "ICP ID manquant",
    };
  }

  count = Math.max(5, Math.min(30, count));

  const icp = await db.query.icpProfiles.findFirst({
    where: and(
      eq(icpProfiles.id, icpId),
      eq(icpProfiles.teamId, team.id)
    ),
  });

  if (!icp) {
    return {
      success: false,
      message: "ICP introuvable ou vous n'y avez pas acc√®s",
    };
  }

  console.log(`\n=== ü§ñ G√âN√âRATION GPT D'ENTREPRISES CIBLES ===`);
  console.log(`ICP: ${icp.name}`);
  console.log(`Nombre demand√©: ${count}`);

  const openai = new OpenAI({
    apiKey: process.env.OPENAI_API_KEY,
  });

  const prompt = buildPrompt(icp, count);
  console.log(`\nüìù PROMPT ENVOY√â √Ä GPT:\n${prompt}\n`);

  try {
    const completion = await openai.chat.completions.create({
      model: "gpt-4o",
      messages: [
        {
          role: "system",
          content:
            "Tu es un expert en prospection B2B et ciblage d'entreprises. Tu analyses des profils ICP et g√©n√®res des listes d'entreprises pertinentes √† contacter.",
        },
        {
          role: "user",
          content: prompt,
        },
      ],
      response_format: { type: "json_object" },
      temperature: 0.8,
    });

    const rawResponse = completion.choices[0].message.content?.trim() || "{}";
    console.log(`\nüì• R√âPONSE BRUTE GPT:\n${rawResponse}\n`);

    let parsedResponse: { companies: Array<{ name: string; industry: string; reason: string; linkedin_url?: string }> };
    
    try {
      parsedResponse = JSON.parse(rawResponse);
    } catch (parseError) {
      console.error("‚ùå Erreur de parsing JSON:", parseError);
      return {
        success: false,
        message: "Erreur lors de l'analyse de la r√©ponse GPT",
      };
    }

    if (!parsedResponse.companies || !Array.isArray(parsedResponse.companies)) {
      console.error("‚ùå Format de r√©ponse invalide:", parsedResponse);
      return {
        success: false,
        message: "Format de r√©ponse GPT invalide",
      };
    }

    console.log(`\n‚úÖ ${parsedResponse.companies.length} entreprises g√©n√©r√©es par GPT`);

    const existingCompanies = await db.query.targetCompanies.findMany({
      where: eq(targetCompanies.teamId, team.id),
    });

    const existingNames = new Set(existingCompanies.map((c) => c.name.toLowerCase()));
    const newCompanies = parsedResponse.companies.filter(
      (c) => !existingNames.has(c.name.toLowerCase())
    );

    console.log(`\nüíæ SAUVEGARDE EN BASE:`);
    console.log(`   Total g√©n√©r√©es: ${parsedResponse.companies.length}`);
    console.log(`   Doublons ignor√©s: ${parsedResponse.companies.length - newCompanies.length}`);
    console.log(`   Nouvelles √† ins√©rer: ${newCompanies.length}`);

    if (newCompanies.length === 0) {
      return {
        success: false,
        message: "Toutes les entreprises g√©n√©r√©es existent d√©j√† dans votre base",
        companiesCount: 0,
      };
    }

    for (const company of newCompanies) {
      await db.insert(targetCompanies).values({
        teamId: team.id,
        icpId,
        name: company.name,
        industry: company.industry || null,
        reason: company.reason || null,
        linkedinUrl: company.linkedin_url || null,
        status: "not_contacted",
      });
      console.log(`   ‚úì ${company.name} - ${company.industry}`);
    }

    revalidatePath("/dashboard/entreprises");

    return {
      success: true,
      message: `${newCompanies.length} entreprises ajout√©es avec succ√®s`,
      companiesCount: newCompanies.length,
    };
  } catch (error) {
    console.error("‚ùå Erreur GPT:", error);
    return {
      success: false,
      message: `Erreur lors de la g√©n√©ration: ${error instanceof Error ? error.message : "Erreur inconnue"}`,
    };
  }
}

function buildPrompt(icp: any, count: number): string {
  const industries = icp.industries || "tous secteurs";
  const locations = icp.locations || "toutes r√©gions";
  const problem = icp.problemStatement || "optimisation et efficacit√©";
  const example = icp.idealCustomerExample || "";

  let prompt = `G√©n√®re une liste de ${count} entreprises fran√ßaises pertinentes √† contacter pour une offre B2B.

**CRIT√àRES ICP:**
- Industries: ${industries}
- Localisations: ${locations}
- Probl√®me r√©solu: ${problem}
${example ? `- Exemple de client id√©al: ${example}` : ""}

**INSTRUCTIONS:**
1. Identifie les entreprises qui ont R√âELLEMENT ce probl√®me (pas les revendeurs/int√©grateurs)
2. Focus sur les entreprises qui UTILISENT des solutions, pas celles qui les VENDENT
3. Varie la taille des entreprises (PME, ETI, Grandes entreprises)
4. Trouve l'URL LinkedIn de l'entreprise si possible

**FORMAT DE R√âPONSE (JSON STRICT):**
\`\`\`json
{
  "companies": [
    {
      "name": "Nom de l'entreprise",
      "industry": "Secteur d'activit√©",
      "reason": "Pourquoi cette entreprise est pertinente (1 phrase)",
      "linkedin_url": "linkedin.com/company/nom-entreprise"
    }
  ]
}
\`\`\`

R√©ponds UNIQUEMENT avec le JSON, sans texte avant ou apr√®s.`;

  return prompt;
}
