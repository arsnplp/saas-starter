"use server";

import { revalidatePath } from "next/cache";
import OpenAI from "openai";
import { db } from "@/lib/db";
import { targetCompanies, icpProfiles } from "@/lib/db/schema";
import { eq, and } from "drizzle-orm";
import { getUser, getTeamForUser } from "@/lib/db/queries";
import { findAndEnrichDecisionMakers } from "@/lib/services/decision-maker-orchestrator";

export async function generateCompaniesAction(formData: FormData) {
  const user = await getUser();
  if (!user) {
    return {
      success: false,
      message: "Non authentifi√©",
    };
  }

  const team = await getTeamForUser();
  if (!team) {
    return {
      success: false,
      message: "√âquipe introuvable",
    };
  }

  const icpId = parseInt(String(formData.get("icpId") || "0"));
  let count = parseInt(String(formData.get("count") || "15"));

  if (!icpId) {
    return {
      success: false,
      message: "ICP ID manquant",
    };
  }

  count = Math.max(5, Math.min(30, count));

  const icp = await db.query.icpProfiles.findFirst({
    where: and(
      eq(icpProfiles.id, icpId),
      eq(icpProfiles.teamId, team.id)
    ),
  });

  if (!icp) {
    return {
      success: false,
      message: "ICP introuvable ou vous n'y avez pas acc√®s",
    };
  }

  console.log(`\n=== ü§ñ G√âN√âRATION GPT D'ENTREPRISES CIBLES ===`);
  console.log(`ICP: ${icp.name}`);
  console.log(`Nombre demand√©: ${count}`);

  // Get existing companies to avoid duplicates
  const existingCompanies = await db.query.targetCompanies.findMany({
    where: and(
      eq(targetCompanies.teamId, team.id),
      eq(targetCompanies.icpId, icpId)
    ),
  });

  const alreadySuggested = existingCompanies.map((c) => c.name);
  console.log(`\nüìã Entreprises d√©j√† sugg√©r√©es pour cet ICP: ${alreadySuggested.length}`);

  const openai = new OpenAI({
    apiKey: process.env.OPENAI_API_KEY,
  });

  const prompt = buildPrompt(icp, count, alreadySuggested);
  console.log(`\nüìù PROMPT ENVOY√â √Ä GPT:\n${prompt}\n`);

  try {
    const completion = await openai.chat.completions.create({
      model: "gpt-4o",
      messages: [
        {
          role: "system",
          content:
            "Tu es un expert en prospection B2B et ciblage d'entreprises. Tu analyses des profils ICP et g√©n√®res des listes d'entreprises pertinentes √† contacter.",
        },
        {
          role: "user",
          content: prompt,
        },
      ],
      response_format: { type: "json_object" },
      temperature: 0.8,
    });

    const rawResponse = completion.choices[0].message.content?.trim() || "{}";
    console.log(`\nüì• R√âPONSE BRUTE GPT:\n${rawResponse}\n`);

    let parsedResponse: { companies: Array<{ name: string; industry: string; reason: string; linkedin_url?: string }> };
    
    try {
      parsedResponse = JSON.parse(rawResponse);
    } catch (parseError) {
      console.error("‚ùå Erreur de parsing JSON:", parseError);
      return {
        success: false,
        message: "Erreur lors de l'analyse de la r√©ponse GPT",
      };
    }

    if (!parsedResponse.companies || !Array.isArray(parsedResponse.companies)) {
      console.error("‚ùå Format de r√©ponse invalide:", parsedResponse);
      return {
        success: false,
        message: "Format de r√©ponse GPT invalide",
      };
    }

    console.log(`\n‚úÖ ${parsedResponse.companies.length} entreprises g√©n√©r√©es par GPT`);

    const existingCompanies = await db.query.targetCompanies.findMany({
      where: eq(targetCompanies.teamId, team.id),
    });

    const existingNames = new Set(existingCompanies.map((c) => c.name.toLowerCase()));
    const newCompanies = parsedResponse.companies.filter(
      (c) => !existingNames.has(c.name.toLowerCase())
    );

    console.log(`\nüíæ SAUVEGARDE EN BASE:`);
    console.log(`   Total g√©n√©r√©es: ${parsedResponse.companies.length}`);
    console.log(`   Doublons ignor√©s: ${parsedResponse.companies.length - newCompanies.length}`);
    console.log(`   Nouvelles √† ins√©rer: ${newCompanies.length}`);

    for (const company of newCompanies) {
      await db.insert(targetCompanies).values({
        teamId: team.id,
        icpId,
        name: company.name,
        industry: company.industry || null,
        reason: company.reason || null,
        linkedinUrl: company.linkedin_url || null,
        status: "not_contacted",
      });
      console.log(`   ‚úì ${company.name} - ${company.industry}`);
    }

    revalidatePath("/dashboard/entreprises");

    return {
      success: true,
      message: `${newCompanies.length} entreprises ajout√©es avec succ√®s`,
      companiesCount: newCompanies.length,
    };
  } catch (error) {
    console.error("‚ùå Erreur GPT:", error);
    return {
      success: false,
      message: `Erreur lors de la g√©n√©ration: ${error instanceof Error ? error.message : "Erreur inconnue"}`,
    };
  }
}

function buildPrompt(icp: any, count: number, alreadySuggested: string[]): string {
  const industries = icp.industries || "tous secteurs";
  const locations = icp.locations || "toutes r√©gions";
  const problem = icp.problemStatement || "optimisation et efficacit√©";
  const example = icp.idealCustomerExample || "";

  let prompt = `G√©n√®re une liste de ${count} entreprises fran√ßaises pertinentes √† contacter pour une offre B2B.

**CRIT√àRES ICP:**
- Industries: ${industries}
- Localisations: ${locations}
- Probl√®me r√©solu: ${problem}
${example ? `- Exemple de client id√©al: ${example}` : ""}

**INSTRUCTIONS:**
1. Identifie les entreprises qui ont R√âELLEMENT ce probl√®me (pas les revendeurs/int√©grateurs)
2. Focus sur les entreprises qui UTILISENT des solutions, pas celles qui les VENDENT
3. Varie la taille des entreprises (PME, ETI, Grandes entreprises)
4. Trouve l'URL LinkedIn de l'entreprise si possible
5. **IMPORTANT: NE SUGG√àRE PAS ces entreprises d√©j√† propos√©es:**
${alreadySuggested.length > 0 ? alreadySuggested.map(name => `   - ${name}`).join('\n') : '   (Aucune entreprise √† √©viter pour l\'instant)'}

**FORMAT DE R√âPONSE (JSON STRICT):**
\`\`\`json
{
  "companies": [
    {
      "name": "Nom de l'entreprise",
      "industry": "Secteur d'activit√©",
      "reason": "Pourquoi cette entreprise est pertinente (1 phrase)",
      "linkedin_url": "linkedin.com/company/nom-entreprise"
    }
  ]
}
\`\`\`

R√©ponds UNIQUEMENT avec le JSON, sans texte avant ou apr√®s.`;

  return prompt;
}

// ========== FIND CONTACT ACTION ==========
/**
 * ANCIEN: Recherche web de contacts
 * @deprecated Utilisez findDecisionMakersUnifiedAction √† la place
 */
export async function findContactAction(formData: FormData) {
  const companyId = String(formData.get("companyId") || "");
  
  if (!companyId) {
    return { success: false, message: "ID entreprise manquant" };
  }

  return findDecisionMakersUnifiedAction(companyId);
}

/**
 * VERSION ORIGINALE (conserv√©e pour r√©f√©rence, non utilis√©e)
 */
async function findContactActionOriginal(formData: FormData) {
  const user = await getUser();
  if (!user) {
    return { success: false, message: "Non authentifi√©" };
  }

  const team = await getTeamForUser();
  if (!team) {
    return { success: false, message: "√âquipe introuvable" };
  }

  const companyId = String(formData.get("companyId") || "");
  
  if (!companyId) {
    return { success: false, message: "ID entreprise manquant" };
  }

  // Verify company ownership
  const company = await db.query.targetCompanies.findFirst({
    where: and(
      eq(targetCompanies.id, companyId),
      eq(targetCompanies.teamId, team.id)
    ),
  });

  if (!company) {
    return { success: false, message: "Entreprise introuvable" };
  }

  // Get ICP to know which roles to search for
  const icp = await db.query.icpProfiles.findFirst({
    where: and(
      eq(icpProfiles.id, company.icpId!),
      eq(icpProfiles.teamId, team.id)
    ),
  });

  if (!icp || !icp.buyerRoles) {
    return { success: false, message: "ICP ou postes non d√©finis" };
  }

  const roles = icp.buyerRoles.split(',').map(r => r.trim()).filter(Boolean);
  
  if (roles.length === 0) {
    return { success: false, message: "Aucun poste d√©fini dans l'ICP" };
  }

  console.log(`\n=== üîç RECHERCHE DE CONTACT INTELLIGENTE ===`);
  console.log(`Entreprise: ${company.name}`);
  console.log(`URL LinkedIn: ${company.linkedinUrl || "Non disponible"}`);
  console.log(`Postes cibles: ${roles.join(', ')}`);

  try {
    // Step 1: Web research to find decision makers
    console.log(`\nüì° √âTAPE 1: Recherche web approfondie...`);
    const webResults = await searchDecisionMakers(company.name, roles);
    console.log(`   R√©sultats web r√©cup√©r√©s: ${webResults.length > 0 ? 'Oui' : 'Non'}`);

    // Step 2: GPT analyzes web results to extract names and titles
    console.log(`\nü§ñ √âTAPE 2: Analyse GPT des r√©sultats...`);
    const extractedContacts = await extractContactsFromWeb(webResults, company.name, roles);
    console.log(`   Contacts identifi√©s: ${extractedContacts.length}`);

    if (extractedContacts.length === 0) {
      return {
        success: false,
        message: "Aucun d√©cideur identifi√© via la recherche web",
      };
    }

    // Step 3: Process ALL contacts found
    console.log(`\nüîç √âTAPE 3: Traitement de tous les contacts...`);
    const { enrichDecisionMaker } = await import("@/lib/services/decision-makers");
    const { enrichContactInfo } = await import("@/lib/services/contact-enrichment");
    const { decisionMakers } = await import("@/lib/db/schema");
    let successCount = 0;
    let enrichedCount = 0;

    for (const contact of extractedContacts) {
      try {
        console.log(`\n   üë§ Traitement: ${contact.firstName} ${contact.lastName}`);
        
        // Search for LinkedIn profile
        const linkedInResult = await searchSingleLinkedInProfile(company, contact);
        
        let decisionMakerId: string | null = null;
        let linkedinUrl = '';
        let profilePictureUrl: string | null = null;
        
        if (linkedInResult.found && linkedInResult.contact) {
          console.log(`      ‚úÖ Profil LinkedIn trouv√©`);
          linkedinUrl = linkedInResult.contact.linkedinUrl;
          profilePictureUrl = linkedInResult.contact.profilePicture || null;
        } else {
          console.log(`      ‚ö†Ô∏è Profil LinkedIn non trouv√©`);
          linkedinUrl = `temp-${team.id}-${companyId}-${contact.firstName}-${contact.lastName}`.toLowerCase().replace(/\s+/g, '-');
        }
        
        // Save to database first
        const [savedMaker] = await db.insert(decisionMakers)
          .values({
            teamId: team.id,
            companyId: companyId,
            fullName: linkedInResult.found ? linkedInResult.contact!.name : `${contact.firstName} ${contact.lastName}`,
            firstName: contact.firstName,
            lastName: contact.lastName,
            title: linkedInResult.found ? linkedInResult.contact!.title : contact.title,
            linkedinUrl,
            profilePictureUrl,
            emailStatus: 'not_found',
            phoneStatus: 'not_found',
            status: 'discovered',
            createdAt: new Date(),
            updatedAt: new Date(),
          })
          .returning({ id: decisionMakers.id })
          .onConflictDoNothing();
        
        decisionMakerId = savedMaker?.id || null;
        successCount++;
        
        // Multi-source enrichment
        if (decisionMakerId) {
          try {
            console.log(`      üîé Enrichissement multi-sources...`);
            
            let currentEmail: string | null = null;
            let currentPhone: string | null = null;
            
            // First try LinkUp enrichment if we have a real LinkedIn URL
            if (linkedInResult.found && linkedinUrl && !linkedinUrl.startsWith('temp-')) {
              try {
                await enrichDecisionMaker({
                  decisionMakerId,
                  teamId: team.id,
                });
                console.log(`      ‚úÖ Enrichissement LinkUp termin√©`);
                
                // Fetch current data to see what LinkUp found
                const updatedMaker = await db.query.decisionMakers.findFirst({
                  where: eq(decisionMakers.id, decisionMakerId),
                });
                
                if (updatedMaker) {
                  currentEmail = updatedMaker.email;
                  currentPhone = updatedMaker.phone;
                  
                  if (currentEmail || currentPhone) {
                    console.log(`      ‚úÖ LinkUp a trouv√©: ${currentEmail ? 'email' : ''}${currentEmail && currentPhone ? ' + ' : ''}${currentPhone ? 't√©l√©phone' : ''}`);
                  }
                }
              } catch (enrichError) {
                console.log(`      ‚ö†Ô∏è LinkUp enrichissement √©chou√©, passage aux autres sources...`);
              }
            }
            
            // Only search if we still need email or phone
            if (!currentEmail || !currentPhone) {
              console.log(`      üåê Recherche web pour coordonn√©es manquantes...`);
              
              const enrichmentResult = await enrichContactInfo(
                {
                  fullName: `${contact.firstName} ${contact.lastName}`,
                  firstName: contact.firstName,
                  lastName: contact.lastName,
                  title: contact.title,
                  companyName: company.name,
                  companyWebsite: company.website || undefined,
                  linkedinUrl: linkedInResult.found ? linkedinUrl : undefined,
                },
                currentEmail,
                currentPhone
              );
              
              if (enrichmentResult) {
                // Update with found contact information
                const updateData: any = {
                  updatedAt: new Date(),
                };
                
                if (enrichmentResult.email && !currentEmail) {
                  updateData.email = enrichmentResult.email;
                  updateData.emailStatus = 'found';
                }
                
                if (enrichmentResult.phone && !currentPhone) {
                  updateData.phone = enrichmentResult.phone;
                  updateData.phoneStatus = 'found';
                }
                
                await db.update(decisionMakers)
                  .set(updateData)
                  .where(eq(decisionMakers.id, decisionMakerId));
                
                enrichedCount++;
                console.log(`      ‚úÖ Enrichi avec succ√®s via ${enrichmentResult.source}`);
              } else {
                console.log(`      ‚ö†Ô∏è Aucune coordonn√©e suppl√©mentaire trouv√©e`);
              }
            } else {
              console.log(`      ‚úÖ Toutes les coordonn√©es d√©j√† trouv√©es par LinkUp`);
              enrichedCount++;
            }
          } catch (enrichError) {
            console.log(`      ‚ö†Ô∏è Enrichissement √©chou√©:`, enrichError);
          }
        }
      } catch (contactError) {
        console.error(`      ‚ùå Erreur pour ${contact.firstName} ${contact.lastName}:`, contactError);
      }
    }

    revalidatePath("/dashboard/entreprises");
    revalidatePath(`/dashboard/entreprises/${companyId}`);

    const message = `${successCount} contact(s) trouv√©(s)${enrichedCount > 0 ? `, dont ${enrichedCount} enrichi(s) avec email/t√©l√©phone` : ''}`;

    return {
      success: successCount > 0,
      message,
      count: successCount,
      enriched: enrichedCount,
    };
  } catch (error) {
    console.error("‚ùå Erreur recherche contact:", error);
    return {
      success: false,
      message: `Erreur: ${error instanceof Error ? error.message : "Erreur inconnue"}`,
    };
  }
}

// Step 1: Web search to find decision makers
async function searchDecisionMakers(companyName: string, roles: string[]): Promise<string> {
  try {
    const searchQuery = `${companyName} ${roles.join(' OR ')} directeur responsable d√©cideur`;
    console.log(`   Recherche: "${searchQuery}"`);
    
    const response = await fetch('https://api.tavily.com/search', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        api_key: process.env.TAVILY_API_KEY || '',
        query: searchQuery,
        search_depth: 'advanced',
        max_results: 5,
      }),
    });

    if (!response.ok) {
      console.error(`   ‚ùå Erreur API Tavily: ${response.status}`);
      return '';
    }

    const data = await response.json();
    const combinedResults = data.results
      ?.map((r: any) => `${r.title}\n${r.content}`)
      .join('\n\n') || '';
    
    console.log(`   R√©sultats obtenus: ${combinedResults.length} caract√®res`);
    return combinedResults;
  } catch (error) {
    console.error(`   ‚ùå Erreur recherche web:`, error);
    return '';
  }
}

// Step 2: GPT extracts contact info from web results
async function extractContactsFromWeb(
  webResults: string,
  companyName: string,
  roles: string[]
): Promise<Array<{ firstName: string; lastName: string; title: string }>> {
  if (!webResults) {
    return [];
  }

  const openai = new OpenAI({
    apiKey: process.env.OPENAI_API_KEY,
  });

  const prompt = `Analyse ces r√©sultats web sur l'entreprise "${companyName}" et identifie les d√©cideurs pertinents.

**R√âSULTATS WEB:**
${webResults.slice(0, 3000)}

**POSTES RECHERCH√âS:**
${roles.join(', ')}

**INSTRUCTIONS:**
1. Trouve les noms complets (pr√©nom + nom) des personnes mentionn√©es
2. Identifie leur titre/poste exact
3. Ne retiens que les personnes ayant un poste de d√©cision pertinent
4. Si tu trouves plusieurs personnes, priorise par pertinence

**FORMAT DE R√âPONSE (JSON STRICT):**
{
  "contacts": [
    {
      "firstName": "Pr√©nom",
      "lastName": "Nom",
      "title": "Titre exact"
    }
  ]
}

R√©ponds UNIQUEMENT avec le JSON, sans texte avant ou apr√®s.`;

  try {
    const completion = await openai.chat.completions.create({
      model: "gpt-4o",
      messages: [
        { role: "system", content: "Tu es un expert en identification de d√©cideurs B2B." },
        { role: "user", content: prompt },
      ],
      response_format: { type: "json_object" },
      temperature: 0.3,
    });

    const response = JSON.parse(completion.choices[0].message.content || "{}");
    const contacts = response.contacts || [];
    
    contacts.forEach((c: any) => {
      console.log(`   ‚Üí ${c.firstName} ${c.lastName} - ${c.title}`);
    });

    return contacts;
  } catch (error) {
    console.error("‚ùå Erreur extraction GPT:", error);
    return [];
  }
}

// Step 3a: Fallback web search for LinkedIn profile
async function searchLinkedInProfileViaWeb(
  contact: { firstName: string; lastName: string; title: string },
  companyName: string
): Promise<{
  found: boolean;
  contact?: { name: string; title: string; linkedinUrl: string };
}> {
  const tavilyApiKey = process.env.TAVILY_API_KEY;
  
  if (!tavilyApiKey) {
    return { found: false };
  }

  try {
    console.log(`   üåê Recherche web du profil LinkedIn...`);
    
    const searchQuery = `site:linkedin.com/in "${contact.firstName} ${contact.lastName}" "${companyName}"`;

    const response = await fetch('https://api.tavily.com/search', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        api_key: tavilyApiKey,
        query: searchQuery,
        max_results: 3,
      }),
    });

    if (!response.ok) {
      return { found: false };
    }

    const data = await response.json();
    const results = data.results || [];
    
    if (results.length === 0) {
      return { found: false };
    }

    // Extract LinkedIn URL from first result
    const firstResult = results[0];
    const linkedinUrlMatch = firstResult.url.match(/linkedin\.com\/in\/[^/?]+/);
    
    if (linkedinUrlMatch) {
      const linkedinUrl = linkedinUrlMatch[0];
      console.log(`   ‚úÖ Profil LinkedIn trouv√© via web: ${linkedinUrl}`);
      
      return {
        found: true,
        contact: {
          name: `${contact.firstName} ${contact.lastName}`,
          title: contact.title,
          linkedinUrl: `https://${linkedinUrl}`,
        },
      };
    }

    return { found: false };
  } catch (error) {
    console.error(`   ‚ùå Erreur recherche web LinkedIn:`, error);
    return { found: false };
  }
}

// Step 3: Search a single LinkedIn profile with LinkUp
async function searchSingleLinkedInProfile(
  company: any,
  contact: { firstName: string; lastName: string; title: string }
): Promise<{
  found: boolean;
  contact?: { name: string; title: string; linkedinUrl: string; profilePicture?: string };
  foundWithQuery?: string;
}> {
  const linkupApiKey = process.env.LINKUP_API_KEY;
  const linkupApiBase = process.env.LINKUP_API_BASE || "https://api.linkupapi.com";

  if (!linkupApiKey) {
    throw new Error("LINKUP_API_KEY non configur√©e");
  }

  // Extract company URL from LinkedIn URL
  const companyUrl = company.linkedinUrl 
    ? company.linkedinUrl.replace('https://', '').replace('http://', '')
    : null;

  if (!companyUrl) {
    console.log(`   ‚ö†Ô∏è Pas d'URL LinkedIn pour l'entreprise, recherche web de secours...`);
    return searchLinkedInProfileViaWeb(contact, company.name);
  }

  const loginToken = process.env.LINKUP_LOGIN_TOKEN;
  
  if (!loginToken) {
    console.log(`   ‚ö†Ô∏è LINKUP_LOGIN_TOKEN non disponible, recherche web de secours...`);
    return searchLinkedInProfileViaWeb(contact, company.name);
  }

  const searchParams = {
    first_name: contact.firstName,
    last_name: contact.lastName,
    company_url: companyUrl,
    login_token: loginToken,
    total_results: 5,
  };

  console.log(`   Recherche LinkUp: ${contact.firstName} ${contact.lastName} @ ${company.name}`);

  try {
    const response = await fetch(`${linkupApiBase}/v1/profile/search`, {
      method: "POST",
      headers: {
        "x-api-key": linkupApiKey,
        "Content-Type": "application/json",
      },
      body: JSON.stringify(searchParams),
    });

    console.log(`   üì° Statut LinkUp: ${response.status} ${response.statusText}`);

    if (response.ok) {
      const data = await response.json();
      
      // LinkUp returns data in: { status: "success", data: { profiles: [...] } }
      const profiles = data?.data?.profiles || [];
      
      if (profiles.length > 0) {
        const profile = profiles[0];
        console.log(`   ‚úÖ Profil LinkedIn trouv√© via LinkUp: ${profile.name}`);
        return {
          found: true,
          contact: {
            name: profile.name || `${contact.firstName} ${contact.lastName}`,
            title: profile.job_title || contact.title,
            linkedinUrl: profile.profile_url || "",
            profilePicture: profile.profile_picture || undefined,
          },
          foundWithQuery: JSON.stringify({ firstName: contact.firstName, lastName: contact.lastName }),
        };
      } else {
        console.log(`   ‚ö†Ô∏è LinkUp n'a rien trouv√©, recherche web de secours...`);
      }
    } else {
      const errorText = await response.text();
      console.log(`   ‚ùå Erreur LinkUp (${response.status}), recherche web de secours...`);
    }
  } catch (error) {
    console.error(`   ‚ùå Exception LinkUp, recherche web de secours...`);
  }

  // Fallback to web search if LinkUp failed or found nothing
  return searchLinkedInProfileViaWeb(contact, company.name);
}

/**
 * NOUVELLE ACTION UNIFI√âE : Recherche intelligente de d√©cideurs avec enrichissement automatique
 * Combine LinkUp (profils + scores) et Web Search (enrichissement automatique)
 */
export async function findDecisionMakersUnifiedAction(companyId: string) {
  const user = await getUser();
  if (!user) {
    return {
      success: false,
      message: "Non authentifi√©",
    };
  }

  const team = await getTeamForUser();
  if (!team) {
    return {
      success: false,
      message: "√âquipe introuvable",
    };
  }

  try {
    const result = await findAndEnrichDecisionMakers({
      companyId,
      teamId: team.id,
    });

    revalidatePath(`/dashboard/entreprises/${companyId}`);
    revalidatePath("/dashboard/entreprises");
    revalidatePath("/dashboard/decideurs");

    if (result.count === 0) {
      return {
        success: false,
        message: "Aucun d√©cideur trouv√© pour cette entreprise",
      };
    }

    return {
      success: true,
      message: `${result.count} d√©cideur(s) trouv√©(s) et enrichi(s) automatiquement`,
      count: result.count,
    };
  } catch (error: any) {
    console.error("‚ùå Erreur lors de la recherche unifi√©e:", error);
    return {
      success: false,
      message: error.message || "Erreur lors de la recherche de d√©cideurs",
    };
  }
}

/**
 * ANCIEN: Lance la recherche intelligente de d√©cideurs pour une entreprise
 * @deprecated Utilisez findDecisionMakersUnifiedAction √† la place
 */
export async function findDecisionMakersAction(companyId: string) {
  return findDecisionMakersUnifiedAction(companyId);
}

/**
 * Enrichit un d√©cideur pour r√©cup√©rer email et t√©l√©phone
 */
export async function enrichDecisionMakerAction(decisionMakerId: string) {
  const user = await getUser();
  if (!user) {
    return {
      success: false,
      message: "Non authentifi√©",
    };
  }

  const team = await getTeamForUser();
  if (!team) {
    return {
      success: false,
      message: "√âquipe introuvable",
    };
  }

  try {
    const { enrichDecisionMaker } = await import(
      "@/lib/services/decision-makers"
    );

    await enrichDecisionMaker({
      decisionMakerId,
      teamId: team.id,
    });

    revalidatePath("/dashboard/entreprises");

    return {
      success: true,
      message: "D√©cideur enrichi avec succ√®s",
    };
  } catch (error: any) {
    console.error("‚ùå Erreur lors de l'enrichissement:", error);
    return {
      success: false,
      message: error.message || "Erreur lors de l'enrichissement du d√©cideur",
    };
  }
}
